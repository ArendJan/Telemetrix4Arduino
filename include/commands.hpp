#pragma once

enum  MESSAGE_IN_TYPE:uint8_t {
SERIAL_LOOP_BACK = 0,
SET_PIN_MODE = 1,
DIGITAL_WRITE = 2,
PWM_WRITE = 3,
MODIFY_REPORTING = 4,
GET_FIRMWARE_VERSION = 5,
GET_UNIQUE_ID = 6,
SERVO_ATTACH = 7,// = unused
SERVO_WRITE = 8, // = unused
SERVO_DETACH = 9, // = unused
I2C_BEGIN = 10,
I2C_READ = 11,
I2C_WRITE = 12,
SONAR_NEW = 13,
DHT_NEW = 14,
STOP_ALL_REPORTS = 15,
ENABLE_ALL_REPORTS = 16,
RESET_DATA = 17,
RESET_BOARD = 18,
INITIALIZE_NEO_PIXELS = 19,
SHOW_NEO_PIXELS = 20,
SET_NEO_PIXEL = 21,
CLEAR_ALL_NEO_PIXELS = 22,
FILL_NEO_PIXELS = 23,
SPI_INIT = 24,
SPI_WRITE_BLOCKING = 25,
SPI_READ_BLOCKING = 26,
SPI_SET_FORMAT = 27,
SPI_CS_CONTROL = 28,
SET_SCAN_DELAY = 29,
ENCODER_NEW = 30,
SENSOR_NEW = 31,
 GET_ID = 35,
 SET_ID = 36,
FEATURE_CHECK = 37,
 MAX_IN_MESSAGE_TYPE
};


enum MESSAGE_OUT_TYPE:uint8_t {
    SERIAL_LOOP_BACK_REPORT = 0,
    DIGITAL_REPORT = 2,
    ANALOG_REPORT = 3,
    FIRMWARE_REPORT = 5,
    REPORT_UNIQUE_ID = 6,
    SERVO_UNAVAILABLE = 7, // for the future
    I2C_WRITE_REPORT = 8,
    I2C_READ_FAILED = 9,
    I2C_READ_REPORT = 10,
    SONAR_DISTANCE = 11,
    DHT_REPORT = 12,
    SPI_REPORT = 13,
    ENCODER_REPORT = 14,
    DEBUG_PRINT = 99,
    SENSOR_REPORT = 20,
    PONG_REPORT = 32,
    MODULE_REPORT = 34,
    MAX_OUT_MESSAGE_TYPE
};


